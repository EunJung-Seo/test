2.2 syndML에 대한 개요
일관된 방법으로 동기 정보를 표현하게 하는 표준 언어와, 상대편 디바이스와 교환절차를 규정한 프로토콜.
메시지는 xml / 메시지 내 명령어 및 데이터 동기화를 위한 정보는 xml dtd(document type definition)

전송 프로토콜 바인딩 : HTTP / WSP / OBEX 각 프로토콜 마다 지켜야할 규칙들을 정의 

데이터 표현 프로토콜 : 메시지의 구조 / 패키지 > 메시지 > 헤더(라우팅 정보, syncML버전 정보, 인증), 바디 > 커멘드 (동기화 데이터 정보나 메타 정보)

동기화 프로토콜 : 
 	동기화에 필요한 정보 - change log information(변화 기록)/ sync anchor(동기화 해야할 위치를 알려줌)/ ID 매핑정보
 	동기화 타입 - 양방향/ 슬로우(풀)/ 클라 단방향/ 클라 단방향 리프레쉬/ 서버 단방향/ 서버 단방향 리프레쉬/ 서버 요청/



 	클라 요청 -> 초기화(인증, anchor값 비교) -> 데이터 전송 -> 반영, 응답 -> 반영 



syncML 서버 : 

	서버 어플리케이션 : DB 접근, CRUD

	syncAgent는 서비스에 독립적이다 -> 서비스가 바뀌어도 사용가능하다.


	세션 정보를 관리하는 테이블이 있다. 
	anchor를 관리하는 테이블도 있다. 이걸 비교하는 초기화 작업도 있고. 이 비교를 통해 어떤 동기화를 할 것인지 결정.
	디바이스 정보/ 각 데이터별 고유id값/
	요청 타입과 그에대한 응답 결과도 다 테이블에 저장 .




	게이트 웨이를 만들어야 하는가? 요청 - 게이트웨이 - 요청 처리 uri - DB

